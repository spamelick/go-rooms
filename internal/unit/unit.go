package unit

import (
	"fmt"
	"math/rand"
	"slices"

	"github.com/fatih/color"
)

type defender interface {
	isAlive() bool
	defend(bp string, damage int) int
	getBodyParts() []string
	getHp() int
}

// -------------------------
// –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–Ω–∏—Ç–∞. –Æ–Ω–∏—Ç–æ–º —è–≤–ª—è—é—Ç—Å—è –ª—é–±—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–∏—Ç–≤—ã.
// -------------------------
type baseUnit struct {
	name             string
	maxHp, currentHp int
	actions, damage  int
	bodyParts        []string
	blocks           []string
	targets          []string
}

func (u *baseUnit) String() string {
	return fmt.Sprintf("%v(%v)", u.name, u.currentHp)
}

func (u *baseUnit) getHp() int {
	return u.currentHp
}

func (u *baseUnit) getBodyPart(name string) int {
	return slices.IndexFunc(u.getBodyParts(), func(item string) bool {
		return item == name
	})
}

// –ß–∞—Å—Ç–∏ —Ç–µ–ª–∞.
func (u *baseUnit) getBodyParts() []string {
	return u.bodyParts
}

// –ù–∞–ª–∏—á–∏–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞.
func (u *baseUnit) hasBodyPart(name string) bool {
	return u.getBodyPart(name) != -1
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–ª–æ–∫–∞ –Ω–∞ —á–∞—Å—Ç–µ —Ç–µ–ª–∞.
func (u *baseUnit) underBlock(name string) bool {
	i := slices.IndexFunc(u.blocks, func(item string) bool {
		return item == name
	})

	return i != -1
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ.
func (u *baseUnit) blockHit(bp string) {
	i := slices.IndexFunc(u.blocks, func(item string) bool {
		return item == bp
	})

	u.blocks = slices.Delete(u.blocks, i, i+1)
}

// –ñ–∏–≤?
func (u *baseUnit) isAlive() bool {
	return u.currentHp > 0
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —á–∞—Å—Ç–∏ —Ç–µ–ª–∞.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏.
func (u *baseUnit) defend(bp string, damage int) int {
	if !u.hasBodyPart(bp) {
		return 0
	}

	if u.underBlock(bp) {
		u.blockHit(bp)
		return 0
	}

	return u.getHit(damage)
}

// –ü–æ–¥—Å—á–µ—Ç –ø–æ—Ç–µ—Ä–∏ –æ—á–∫–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è.
func (u *baseUnit) getHit(damage int) int {
	u.currentHp -= damage
	if u.currentHp < 0 {
		u.currentHp = 0
	}

	return damage
}

// –ê—Ç–∞–∫–∞ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞.
func (u *baseUnit) attackBodyPart(d defender, bodyPart string) int {
	return d.defend(bodyPart, u.damage)
}

// –ü–æ–ª–Ω–∞—è –∞—Ç–∞–∫–∞. –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.
func (m *baseUnit) attack(d defender) {
	for _, bodyPart := range m.targets {
		if !d.isAlive() {
			break
		}

		realDamage := m.attackBodyPart(d, bodyPart)
		if realDamage > 0 {
			fmt.Println("üü¢", m, "–∞—Ç–∞–∫—É–µ—Ç –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ ", bodyPart)
		} else {
			fmt.Println("üî¥", m, "–∞—Ç–∞–∫—É–µ—Ç, –Ω–æ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è")
		}
	}
}

// -------------------------
// –ú–æ–Ω—Å—Ç—Ä - —é–Ω–∏—Ç —Å –∞–≤—Ç–æ–≤—ã–±–æ—Ä–æ–º –ø–æ–≤–µ–¥–µ–Ω–∏—è.
// -------------------------
type monster struct {
	baseUnit
}

func (m *monster) setActions(d defender) {
	m.blocks = nil
	m.targets = nil

	modes := []string{"A", "D"}

	var mode string

	for i := 0; i < int(m.actions); i++ {
		mode = modes[rand.Intn(len(modes))]
		if mode == "A" {
			m.chooseAttack(d)
		} else {
			m.chooseDefence()
		}
	}
}

func (m *monster) chooseAttack(d defender) {
	bodyParts := d.getBodyParts()
	m.targets = append(m.targets, bodyParts[rand.Intn(len(bodyParts))])
}

func (m *monster) chooseDefence() {
	bodyParts := m.getBodyParts()
	m.targets = append(m.blocks, bodyParts[rand.Intn(len(bodyParts))])
}

// -------------------------
// –°–æ–∑–¥–∞–Ω–∏–µ –º–æ–Ω—Å—Ç—Ä–∞.
// -------------------------
func NewMonster(name string, icon string, hp, actions int) monster {
	c := color.New(color.Underline)
	return monster{
		baseUnit: baseUnit{
			name:      fmt.Sprintf("%v %v", icon, c.Sprintf(name)),
			maxHp:     hp,
			currentHp: hp,
			damage:    1,
			actions:   actions,
			bodyParts: []string{"–ì–æ–ª–æ–≤–∞", "–¢–æ—Ä—Å", "–ù–æ–≥–∏"},
		},
	}
}
