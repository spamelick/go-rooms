package iunit

import (
	"fmt"
	"os"
	"rooms/internal/ihelp"

	"github.com/fatih/color"
)

// -------------------------
// –ò–≥—Ä–æ–∫ - —é–Ω–∏—Ç –ø–æ–¥ —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ–º –∏–≥—Ä–æ–∫–∞.
// -------------------------
type Player struct {
	baseUnit
}

// –ò–∑–º–µ–Ω–∏—Ç—å –∫–æ–ª-–≤–æ –æ—á–∫–æ–≤ –∂–∏–∑–Ω–µ–π. –ú–æ–∂–µ—Ç –±—ã—Ç—å, –∫–∞–∫ –≤ –ø–ª—é—Å, —Ç–∞–∫ –∏ –≤ –º–∏–Ω—É—Å.
func (u *Player) UpdateHp(value int) {
	u.currentHp += value
	if u.currentHp < 0 {
		u.currentHp = 0
	}

	if u.currentHp > u.maxHp {
		u.currentHp = u.maxHp
	}
}

// –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏–π.
func (u *Player) SetActions(d Defender) {
	u.blocks = nil
	u.targets = nil

	var mode string

	for i := 0; i < int(u.actions); i++ {
		mode = ihelp.Radio("–ß—Ç–æ –¥–µ–ª–∞–µ–º?", []string{"–ê—Ç–∞–∫–∞", "–ó–∞—â–∏—Ç–∞"})

		switch mode {
		case "–ê—Ç–∞–∫–∞":
			u.ChooseAttack(d)
		case "–ó–∞—â–∏—Ç–∞":
			u.ChooseDefence()
		default:
			os.Exit(3)
		}
	}
}

func (u *Player) ChooseAttack(d Defender) {
	answer := ihelp.Radio("–ö—É–¥–∞ –∞—Ç–∞–∫—É–µ–º?", d.GetBodyParts())
	u.targets = append(u.targets, answer)
}

func (u *Player) ChooseDefence() {
	answer := ihelp.Radio("–ß—Ç–æ –∑–∞—â–∏—â–∞–µ–º?", u.GetBodyParts())
	u.blocks = append(u.blocks, answer)
}

// -------------------------
// –°–æ–∑–¥–∞–Ω–∏–µ –∏–≥—Ä–æ–∫–∞.
// -------------------------
func NewPlayer(hp, actions int) Player {
	c := color.New(color.Underline)
	return Player{
		baseUnit: baseUnit{
			name:      fmt.Sprintf("üí© %v", c.Sprintf("–ò–≥—Ä–æ–∫")),
			maxHp:     hp,
			currentHp: hp,
			damage:    2,
			actions:   actions,
			bodyParts: []string{"–ì–æ–ª–æ–≤–∞", "–¢–æ—Ä—Å", "–ù–æ–≥–∏"},
		},
	}
}
