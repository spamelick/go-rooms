package iunit

import (
	"fmt"
	"slices"
)

// -------------------------
// –ó–∞—â–∏—â–∞—é—â–∏–π—Å—è.
// -------------------------
type Defender interface {
	IsAlive() bool
	Defend(bp BodyPart, damage int) int
	GetBodyParts() []BodyPart
	GetHp() int
}

// -------------------------
// –ë–∞–∑–æ–≤—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä—ã —é–Ω–∏—Ç–∞. –Æ–Ω–∏—Ç–æ–º —è–≤–ª—è—é—Ç—Å—è –ª—é–±—ã–µ —É—á–∞—Å—Ç–Ω–∏–∫–∏ –±–∏—Ç–≤—ã.
// -------------------------
type baseUnit struct {
	name             string
	maxHp, currentHp int
	actions, damage  int
	bodyParts        []BodyPart
	blocks           []BodyPart
	targets          []BodyPart
}

func (u *baseUnit) String() string {
	return fmt.Sprintf("%v(%v)", u.name, u.currentHp)
}

func (u *baseUnit) GetName() string {
	return u.name
}

func (u *baseUnit) GetHp() int {
	return u.currentHp
}

func (u *baseUnit) GetBodyPart(bp BodyPart) int {
	return slices.IndexFunc(u.GetBodyParts(), func(item BodyPart) bool {
		return bp == item
	})
}

// –ß–∞—Å—Ç–∏ —Ç–µ–ª–∞.
func (u *baseUnit) GetBodyParts() []BodyPart {
	return u.bodyParts
}

// –ù–∞–ª–∏—á–∏–µ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞.
func (u *baseUnit) HasBodyPart(bp BodyPart) bool {
	return u.GetBodyPart(bp) != -1
}

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –±–ª–æ–∫–∞ –Ω–∞ —á–∞—Å—Ç–µ —Ç–µ–ª–∞.
func (u *baseUnit) underBlock(bp BodyPart) bool {
	i := slices.IndexFunc(u.blocks, func(item BodyPart) bool {
		return bp == item
	})

	return i != -1
}

// –ë–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–∏–µ.
func (u *baseUnit) blockHit(bp BodyPart) {
	i := slices.IndexFunc(u.blocks, func(item BodyPart) bool {
		return item == bp
	})

	u.blocks = slices.Delete(u.blocks, i, i+1)
}

// –ñ–∏–≤?
func (u *baseUnit) IsAlive() bool {
	return u.currentHp > 0
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–≤—Ä–µ–∂–¥–µ–Ω–∏—è —á–∞—Å—Ç–∏ —Ç–µ–ª–∞.
// –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Å—Ç–∞—Ç—É—Å —É—Å–ø–µ—à–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏.
func (u *baseUnit) Defend(bp BodyPart, damage int) int {
	if !u.HasBodyPart(bp) {
		return 0
	}

	if u.underBlock(bp) {
		u.blockHit(bp)
		return 0
	}

	return u.GetHit(damage)
}

// –ü–æ–¥—Å—á–µ—Ç –ø–æ—Ç–µ—Ä–∏ –æ—á–∫–æ–≤ –∑–¥–æ—Ä–æ–≤—å—è.
func (u *baseUnit) GetHit(damage int) int {
	u.currentHp -= damage
	if u.currentHp < 0 {
		u.currentHp = 0
	}

	return damage
}

// –ê—Ç–∞–∫–∞ —á–∞—Å—Ç–∏ —Ç–µ–ª–∞.
func (u *baseUnit) AttackBodyPart(d Defender, bp BodyPart) int {
	return d.Defend(bp, u.damage)
}

// –ü–æ–ª–Ω–∞—è –∞—Ç–∞–∫–∞. –ó–∞–≤–∏—Å–∏—Ç –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.
func (m *baseUnit) Attack(d Defender) {
	for _, bodyPart := range m.targets {
		if !d.IsAlive() {
			break
		}

		realDamage := m.AttackBodyPart(d, bodyPart)
		if realDamage > 0 {
			fmt.Printf("üü¢ %s –∞—Ç–∞–∫—É–µ—Ç –∏ –ø–æ–ø–∞–¥–∞–µ—Ç –ø–æ %s\n", m, bodyPart)
		} else {
			fmt.Printf("üî¥ %s –∞—Ç–∞–∫—É–µ—Ç, –Ω–æ –ø—Ä–æ–º–∞—Ö–∏–≤–∞–µ—Ç—Å—è\n", m)
		}
	}
}
